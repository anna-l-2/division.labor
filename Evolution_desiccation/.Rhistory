geom_boxplot()
ggplot(p.all.mort, aes (x = Cycle, y = Mortality)) +
geom_boxplot()
ggplot(p.all.mort, aes (x = Cycle, y = Mortality)) +
geom_boxplot() +scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5"))
ggplot(mortality.all, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3,) + geom_smooth(method = "loess", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Total Mortality Of Strains",
x = "Cycle",
y = "Mortality") +
scale_color_manual(values=c("#999999", "#56B4E9")) + scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5"))
library(tidyr)
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyverse)
require(survival)
library(purrr)
require(extrafont)
library(tidyr)
library(ggpmisc)
library(broom)
#install.packages("broom")
theme_set(theme_classic() +
theme(axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 15, b = 15)),
axis.title.y = element_text(margin = margin(l = 15, r = 15)),
axis.text = element_text(size = 13),
axis.text.x = element_text(margin = margin(t = 5)),
axis.text.y = element_text(margin = margin(r = 5)),
#axis.line.x = element_line(linewidth = 1),
#axis.line.y = element_line(linewidth = 1),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_line(linewidth = 1),
axis.ticks.y = element_line(linewidth = 1),
axis.ticks.length = unit(.1, "in"),
panel.border = element_rect(color = "grey20", fill = NA, linewidth = 1.5),
legend.text = element_text(size = 14),
strip.text = element_text(size = 14),
strip.background = element_blank()
))
library(tidyr)
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyverse)
require(survival)
library(purrr)
require(extrafont)
library(tidyr)
library(ggpmisc)
library(broom)
#install.packages("broom")
theme_set(theme_classic() +
theme(axis.title = element_text(size = 16),
axis.title.x = element_text(margin = margin(t = 15, b = 15)),
axis.title.y = element_text(margin = margin(l = 15, r = 15)),
axis.text = element_text(size = 13),
axis.text.x = element_text(margin = margin(t = 5)),
axis.text.y = element_text(margin = margin(r = 5)),
#axis.line.x = element_line(linewidth = 1),
#axis.line.y = element_line(linewidth = 1),
axis.line.x = element_blank(),
axis.line.y = element_blank(),
axis.ticks.x = element_line(linewidth = 1),
axis.ticks.y = element_line(linewidth = 1),
axis.ticks.length = unit(.1, "in"),
panel.border = element_rect(color = "grey20", fill = NA, linewidth = 1.5),
legend.text = element_text(size = 14),
strip.text = element_text(size = 14),
strip.background = element_blank()
))
setwd("C:/Users/ajl21/github/division.labor/Evolution_desiccation/")
#data: Turbidity 0 alive 1 death; A-D: 168 WT E-H: SPOIIE
p1 <- read.csv("20250807_1336_evolution_desiccation_plate1.csv")
p2 <- read.csv("20250807_1337_evolution_desiccation_plate2.csv")
p3 <- read.csv("20250807_1338_evolution_desiccation_plate3.csv")
p4 <- read.csv("20250807_1339_evolution_desiccation_plate4.csv")
p5 <- read.csv("20250807_1339_evolution_desiccation_plate5.csv")
strain.label <- function(df) {
df %>%
mutate(Strain = case_when(
substr(Well, 1, 1) %in% c("A", "B", "C", "D") ~ "168",
substr(Well, 1, 1) %in% c("E", "F", "G", "H") ~ "SPO",
TRUE ~ "Unknown"
))
}
p1 <- strain.label(p1)
p2 <- strain.label(p2)
p3 <- strain.label(p3)
p4 <- strain.label(p4)
p5 <- strain.label(p5)
p5
p5 <- na.omit(p5)
#All
plates <- list(p1 = p1, p2 = p2, p3 = p3, p4 = p4, p5 = p5)
p.all <- bind_rows(plates, .id = "Plate")
p.all <- p.all %>%
mutate(Strain = case_when(
substr(Well, 1, 1) %in% c("A", "B", "C", "D") ~ "168",
substr(Well, 1, 1) %in% c("E", "F", "G", "H") ~ "SPO",
TRUE ~ "Unknown"
))
p.all
count_long <- function(df) {
df %>%
filter(Strain %in% c("168", "SPO")) %>%
pivot_longer(cols = starts_with("Cycle"),
names_to = "Cycle",
values_to = "Value") %>%
group_by(Strain, Cycle, Value) %>%
summarise(Count = n(), .groups = "drop") %>%
pivot_wider(names_from = Value, values_from = Count, values_fill = 0) }
mortality <- function(df) {
df %>%
mutate(Mortality = `1` / 48)
}
cycle_counts <- function(df) {
df %>%
filter(Strain %in% c("168", "SPO")) %>%
select(Strain, Cycle.1, `0`, `1`, Mortality)
}
p1.count <-count_long(p1)
p2.count <-count_long(p2)
p3.count <-count_long(p3)
p4.count <-count_long(p4)
p5.count <-count_long(p5)
p1.count
p1.mort <-mortality(p1.count) %>% mutate(Plate = "P1")
p2.mort <-mortality(p2.count) %>% mutate(Plate = "P2")
p3.mort <-mortality(p3.count) %>% mutate(Plate = "P3")
p4.mort <-mortality(p4.count) %>% mutate(Plate = "P4")
p5.mort <-mortality(p5.count) %>% mutate(Plate = "P5")
p1.mort
p5.mort
p.all.mort <- rbind(p1.mort, p2.mort, p3.mort, p4.mort, p5.mort)
p.all.mort #mortality by plate by cycle
# By cycle morality - overarching view
mortality.all <- p.all.mort %>%
group_by(Strain, Cycle) %>%
summarise(
`0` = sum(`0`),
`1` = sum(`1`),
Mortality = sum(`1`) / sum(`0` + `1`),
.groups = "drop"
)
mortality.all
ggplot(mortality.all, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3,) + geom_smooth(method = "loess", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Total Mortality Of Strains",
x = "Cycle",
y = "Mortality") +
scale_color_manual(values=c("#999999", "#56B4E9")) + scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5"))
lm.mort.all <- lm(Mortality ~ Cycle, data = mortality.all)
summary(lm.mort.all)
ggplot(mortality.all, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3,) + geom_smooth(method = "loess", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Total Mortality Of Strains",
x = "Cycle",
y = "Mortality") +
scale_color_manual(values=c("#999999", "#56B4E9")) + scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5"))
loe.mort.all <- loess(Mortality ~ Cycle, data = mortality.all)
# Make Cycle numeric
mortality.all$Cycle_num <- as.numeric(as.character(mortality.all$Cycle))
# Fit exponential model: Mortality = a * exp(b * Cycle)
exp_model <- nls(Mortality ~ a * exp(b * Cycle_num),
data = mortality.all,
start = list(a = 0.1, b = 0.1))
library(dplyr)
# Ensure Cycle is numeric (extract the number from "Cycle 1", "Cycle 2", etc.)
mortality.all <- mortality.all %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle)))
# Make sure no Mortality values are zero or negative (add a tiny offset if needed)
mortality.all <- mortality.all %>%
mutate(Mortality_adj = ifelse(Mortality <= 0, 1e-6, Mortality))
# Fit exponential model
exp_model <- nls(Mortality_adj ~ a * exp(b * Cycle_num),
data = mortality.all,
start = list(a = min(mortality.all$Mortality_adj),
b = 0.1),
control = nls.control(maxiter = 200))
# Remove zeros to avoid log problems
df_exp <- mortality.all %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle))) %>%
filter(Mortality > 0)
# Log-transform Mortality
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = df_exp)
summary(lm_exp)
# Back-transform predictions
df_exp$pred_exp <- exp(predict(lm_exp))
# Plot
ggplot(df_exp, aes(x = Cycle_num, y = Mortality, color = Strain)) +
geom_point(size = 3) +
geom_line(aes(y = pred_exp), size = 1) +
labs(title = "Exponential Fit (via Log-Linear Model)",
x = "Cycle", y = "Mortality") +
scale_x_continuous(breaks = 1:5, labels = paste("Cycle", 1:5))
ggplot(mortality.all, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3,) + geom_smooth(method = "lm", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Total Mortality Of Strains",
x = "Cycle",
y = "Mortality") +
scale_color_manual(values=c("#999999", "#56B4E9")) + scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5"))
lm.mort.all <- lm(Mortality ~ Cycle, data = mortality.all)
summary(lm.mort.all)
ggplot(p5.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3,) + geom_line(size = 1) +
labs(title = "Mortality of Plate 5",
x = "Cycle",
y = "Proportion of Clear Wells") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) + scale_color_manual(values=c("#999999", "#56B4E9"))
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) + geom_smooth(method = "lm", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Mortality Over Cycles by Strain",
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +scale_color_manual(values=c("#000", "burlywood3"))
lm.plate.all <- lm(Mortality ~ Cycle, data = p.all.mort)
summary(lm.plate.all)
library(dplyr)
library(ggplot2)
# Prepare data: make numeric cycle and remove zeros
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle))) %>%
filter(Mortality > 0)  # can't log 0 or negatives
# Log-transform and fit exponential (linear in log-space)
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = p.all.mort)
summary(lm_exp)  # R² is here
# Extract R²
r2_exp <- summary(lm_exp)$r.squared
# Predicted mortality (back-transform)
p.all.mort$pred_exp <- exp(predict(lm_exp))
# Plot
ggplot(p.all.mort, aes(x = Cycle_num, y = Mortality, color = Strain)) +
geom_point(size = 3) +
geom_line(aes(y = pred_exp), size = 1) +
labs(title = paste0("Exponential Fit to Mortality (R² = ", round(r2_exp, 3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_continuous(breaks = 1:5, labels = paste("Cycle", 1:5)) +
scale_color_manual(values=c("#000", "burlywood3"))
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) + geom_smooth(method = "lm", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Mortality Over Cycles by Strain (R² = 0.175) ",
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +scale_color_manual(values=c("#000", "burlywood3"))
lm.plate.all <- lm(Mortality ~ Cycle, data = p.all.mort)
summary(lm.plate.all)
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) + geom_smooth(method = "lm", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Mortality Over Cycles by Strain (R^2 = 0.175) ",
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +scale_color_manual(values=c("#000", "burlywood3"))
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) + geom_smooth(method = "lm", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Mortality Over Cycles by Strain (R^2",
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +scale_color_manual(values=c("#000", "burlywood3"))
lm.plate.all <- lm(Mortality ~ Cycle, data = p.all.mort)
summary(lm.plate.all)
count_long <- function(df) {
df %>%
filter(Strain %in% c("168", "SPO")) %>%
pivot_longer(cols = starts_with("Cycle"),
names_to = "Cycle",
values_to = "Value") %>%
group_by(Strain, Cycle, Value) %>%
summarise(Count = n(), .groups = "drop") %>%
pivot_wider(names_from = Value, values_from = Count, values_fill = 0) }
mortality <- function(df) {
df %>%
mutate(Mortality = `1` / 48)
}
cycle_counts <- function(df) {
df %>%
filter(Strain %in% c("168", "SPO")) %>%
select(Strain, Cycle.1, `0`, `1`, Mortality)
}
p1.count <-count_long(p1)
p2.count <-count_long(p2)
p3.count <-count_long(p3)
p4.count <-count_long(p4)
p5.count <-count_long(p5)
p1.count
p1.mort <-mortality(p1.count) %>% mutate(Plate = "P1")
p2.mort <-mortality(p2.count) %>% mutate(Plate = "P2")
p3.mort <-mortality(p3.count) %>% mutate(Plate = "P3")
p4.mort <-mortality(p4.count) %>% mutate(Plate = "P4")
p5.mort <-mortality(p5.count) %>% mutate(Plate = "P5")
p1.mort
p5.mort
p.all.mort <- rbind(p1.mort, p2.mort, p3.mort, p4.mort, p5.mort)
p.all.mort #mortality by plate by cycle
# By cycle morality - overarching view
mortality.all <- p.all.mort %>%
group_by(Strain, Cycle) %>%
summarise(
`0` = sum(`0`),
`1` = sum(`1`),
Mortality = sum(`1`) / sum(`0` + `1`),
.groups = "drop"
)
mortality.all
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) + geom_smooth(method = "lm", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Mortality Over Cycles by Strain",
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +scale_color_manual(values=c("#000", "burlywood3"))
lm.plate.all <- lm(Mortality ~ Cycle, data = p.all.mort)
summary(lm.plate.all)
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) + geom_smooth(method = "lm", se = TRUE, linetype = "solid", size = 1) +
labs(title = "Mortality Over Cycles by Strain (R^2 =0.175)",
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +scale_color_manual(values=c("#000", "burlywood3"))
lm.plate.all <- lm(Mortality ~ Cycle, data = p.all.mort)
summary(lm.plate.all)
library(dplyr)
library(ggplot2)
# Prepare data: make numeric cycle and remove zeros
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle))) %>%
filter(Mortality > 0)  # can't log 0 or negatives
# Log-transform and fit exponential (linear in log-space)
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = p.all.mort)
summary(lm_exp)  # R² is here
# Extract R²
r2_exp <- summary(lm_exp)$r.squared
# Predicted mortality (back-transform)
p.all.mort$pred_exp <- exp(predict(lm_exp))
# Plot
ggplot(p.all.mort, aes(x = Cycle_num, y = Mortality, color = Strain)) +
geom_point(size = 3) +
geom_line(aes(y = pred_exp), size = 1) +
labs(title = paste0("Exponential Fit to Mortality (R^2 = 0.2902"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_continuous(breaks = 1:5, labels = paste("Cycle", 1:5)) +
scale_color_manual(values=c("#000", "burlywood3"))
library(dplyr)
library(ggplot2)
# Prepare data: make numeric cycle and remove zeros
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle))) %>%
filter(Mortality > 0)  # can't log 0 or negatives
# Log-transform and fit exponential (linear in log-space)
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = p.all.mort)
summary(lm_exp)  # R² is here
# Extract R²
r2_exp <- summary(lm_exp)$r.squared
# Predicted mortality (back-transform)
p.all.mort$pred_exp <- exp(predict(lm_exp))
# Plot
ggplot(p.all.mort, aes(x = Cycle_num, y = Mortality, color = Strain)) +
geom_point(size = 3) +
geom_line(aes(y = pred_exp, group = Strain), size = 1) +  # add group=Strain
labs(title = paste0("Exponential Fit to Mortality (R^2 = ", round(r2_exp, 3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_continuous(breaks = 1:5, labels = paste("Cycle", 1:5)) +
scale_color_manual(values=c("#000000", "burlywood3"))
library(dplyr)
library(ggplot2)
# Prepare data: make numeric cycle and remove zeros
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle))) %>%
filter(Mortality > 0)  # can't log 0 or negatives
# Log-transform and fit exponential (linear in log-space)
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = p.all.mort)
summary(lm_exp)  # R² is here
# Extract R²
r2_exp <- summary(lm_exp)$r.squared
# Predicted mortality (back-transform)
p.all.mort$pred_exp <- exp(predict(lm_exp))
# Plot
ggplot(p.all.mort, aes(x = Cycle_num, y = Mortality, color = Strain)) +
geom_point(size = 3) +
geom_line(aes(y = pred_exp, group = Strain), size = 1) +  # add group=Strain
labs(title = paste0("Exponential Fit to Mortality (R^2 = ", round(r2_exp, 3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_continuous(breaks = 1:5, labels = paste("Cycle", 1:5)) +
scale_color_manual(values=c ("burlywood3", "#000000"))
library(dplyr)
library(ggplot2)
# Make numeric cycle
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle)))
# Separate the strain that gets the exponential fit (e.g., not black)
fit_strain <- p.all.mort %>% filter(Strain != "168" & Mortality > 0)  # replace "168" with black strain name
# Fit log-linear (exponential) model
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = fit_strain)
# Back-transform predictions
fit_strain$pred_exp <- exp(predict(lm_exp))
# Plot
ggplot(p.all.mort, aes(x = Cycle_num, y = Mortality, color = Strain)) +
geom_point(size = 3) +
geom_line(data = fit_strain, aes(x = Cycle_num, y = pred_exp, group = Strain), size = 1) +
labs(title = "Mortality with Exponential Fit (Non-black strain only)",
x = "Cycle",
y = "Mortality Rate") +
scale_x_continuous(breaks = 1:5, labels = paste("Cycle", 1:5)) +
scale_color_manual(values=c("#000000", "burlywood3"))
library(dplyr)
library(ggplot2)
# Prepare numeric cycle for fitting
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle)))
# Filter only the strain to fit (e.g., burlywood3) and positive mortality
fit_strain <- p.all.mort %>% filter(Strain != "168" & Mortality > 0)  # replace "168" with black strain name
# Fit log-linear (exponential) model
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = fit_strain)
# Back-transform predictions
fit_strain$pred_exp <- exp(predict(lm_exp))
# Extract R² for title
r2_exp <- summary(lm_exp)$r.squared
# Plot matching your style
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) +
geom_line(data = fit_strain, aes(x = Cycle, y = pred_exp, group = Strain), size = 1) +
labs(title = paste0("Mortality Over Cycles by Strain (Exponential Fit, R^2 = ", round(r2_exp,3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +
scale_color_manual(values=c("#000000", "burlywood3"))
# Plot matching your style
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) +
geom_line(data = fit_strain, aes(x = Cycle, y = pred_exp, group = Strain), size = 1) +
labs(title = paste0("Mortality Over Cycles by Strain (Exponential Fit, R^2 = ", round(r2_exp,3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +
scale_color_manual(values=c( "burlywood3"))
library(dplyr)
library(ggplot2)
# Prepare numeric cycle for fitting
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle)))
# Filter only the strain to fit (e.g., burlywood3) and positive mortality
fit_strain <- p.all.mort %>% filter(Strain != "168" & Mortality > 0)  # replace "168" with black strain name
# Fit log-linear (exponential) model
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = fit_strain)
# Back-transform predictions
fit_strain$pred_exp <- exp(predict(lm_exp))
# Extract R² for title
r2_exp <- summary(lm_exp)$r.squared
# Plot matching your style
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) +
# Exponential line only for the non-black strain
geom_line(data = fit_strain, aes(x = Cycle, y = pred_exp, group = Strain, color = Strain), size = 1) +
labs(title = paste0("Mortality Over Cycles by Strain (Exponential Fit, R^2 = ", round(r2_exp,3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +
scale_color_manual(values=c("#000000", "burlywood3"))
library(dplyr)
library(ggplot2)
# Prepare numeric cycle for fitting
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle)))
# Filter only the strain to fit (e.g., burlywood3) and positive mortality
fit_strain <- p.all.mort %>% filter(Strain != "168" & Mortality > 0)  # replace "168" with black strain name
# Fit log-linear (exponential) model
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = fit_strain)
# Back-transform predictions
fit_strain$pred_exp <- exp(predict(lm_exp))
# Extract R² for title
r2_exp <- summary(lm_exp)$r.squared
# Plot matching your style
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) +
# Exponential line using numeric Cycle_num for the fit
geom_line(data = fit_strain, aes(x = factor(Cycle_num), y = pred_exp, group = Strain, color = Strain), size = 1) +
labs(title = paste0("Mortality Over Cycles by Strain (Exponential Fit, R^2 = ", round(r2_exp,3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +
scale_color_manual(values=c("#000000", "burlywood3"))
library(dplyr)
library(ggplot2)
# Prepare numeric cycle for fitting
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("[^0-9]", "", Cycle)))
# Filter only the strain to fit (e.g., burlywood3) and positive mortality
fit_strain <- p.all.mort %>% filter(Strain != "168" & Mortality > 0)  # replace "168" with black strain name
# Fit log-linear (exponential) model
lm_exp <- lm(log(Mortality) ~ Cycle_num, data = fit_strain)
# Back-transform predictions
fit_strain$pred_exp <- exp(predict(lm_exp))
# Extract R² for title
r2_exp <- summary(lm_exp)$r.squared
# Plot matching your style
ggplot(p.all.mort, aes(x = Cycle, y = Mortality, group = Strain, color = Strain)) +
geom_point(size = 3) +
# Exponential line only for the non-black strain
geom_line(data = fit_strain, aes(x = Cycle, y = pred_exp, group = Strain, color = Strain), size = 1) +
labs(title = paste0("Mortality Over Cycles by Strain (Exponential Fit, R^2 = ", round(r2_exp,3), ")"),
x = "Cycle",
y = "Mortality Rate") +
scale_x_discrete(labels = c("Cycle 1", "Cycle 2","Cycle 3", "Cycle 4", "Cycle 5")) +
scale_color_manual(values=c("#000000", "burlywood3"))
# Convert Cycle to numeric
p.all.mort <- p.all.mort %>%
mutate(Cycle_num = as.numeric(gsub("Cycle\\.?","", Cycle)))
